// Code generated by MockGen. DO NOT EDIT.
// Source: models/models.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "Shopping-Cart/backend/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductModelImpl is a mock of ProductModelImpl interface.
type MockProductModelImpl struct {
	ctrl     *gomock.Controller
	recorder *MockProductModelImplMockRecorder
}

// MockProductModelImplMockRecorder is the mock recorder for MockProductModelImpl.
type MockProductModelImplMockRecorder struct {
	mock *MockProductModelImpl
}

// NewMockProductModelImpl creates a new mock instance.
func NewMockProductModelImpl(ctrl *gomock.Controller) *MockProductModelImpl {
	mock := &MockProductModelImpl{ctrl: ctrl}
	mock.recorder = &MockProductModelImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductModelImpl) EXPECT() *MockProductModelImplMockRecorder {
	return m.recorder
}

// DbAddProductToBasket mocks base method.
func (m *MockProductModelImpl) DbAddProductToBasket(productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbAddProductToBasket", productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DbAddProductToBasket indicates an expected call of DbAddProductToBasket.
func (mr *MockProductModelImplMockRecorder) DbAddProductToBasket(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbAddProductToBasket", reflect.TypeOf((*MockProductModelImpl)(nil).DbAddProductToBasket), productId)
}

// DbDecrementProductQuantity mocks base method.
func (m *MockProductModelImpl) DbDecrementProductQuantity(productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbDecrementProductQuantity", productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DbDecrementProductQuantity indicates an expected call of DbDecrementProductQuantity.
func (mr *MockProductModelImplMockRecorder) DbDecrementProductQuantity(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbDecrementProductQuantity", reflect.TypeOf((*MockProductModelImpl)(nil).DbDecrementProductQuantity), productId)
}

// DbDeleteProductFromBasket mocks base method.
func (m *MockProductModelImpl) DbDeleteProductFromBasket(productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbDeleteProductFromBasket", productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DbDeleteProductFromBasket indicates an expected call of DbDeleteProductFromBasket.
func (mr *MockProductModelImplMockRecorder) DbDeleteProductFromBasket(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbDeleteProductFromBasket", reflect.TypeOf((*MockProductModelImpl)(nil).DbDeleteProductFromBasket), productId)
}

// DbGetBasketProducts mocks base method.
func (m *MockProductModelImpl) DbGetBasketProducts() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbGetBasketProducts")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbGetBasketProducts indicates an expected call of DbGetBasketProducts.
func (mr *MockProductModelImplMockRecorder) DbGetBasketProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbGetBasketProducts", reflect.TypeOf((*MockProductModelImpl)(nil).DbGetBasketProducts))
}

// DbGetProducts mocks base method.
func (m *MockProductModelImpl) DbGetProducts() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbGetProducts")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbGetProducts indicates an expected call of DbGetProducts.
func (mr *MockProductModelImplMockRecorder) DbGetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbGetProducts", reflect.TypeOf((*MockProductModelImpl)(nil).DbGetProducts))
}

// DbIncrementProductQuantity mocks base method.
func (m *MockProductModelImpl) DbIncrementProductQuantity(productId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbIncrementProductQuantity", productId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DbIncrementProductQuantity indicates an expected call of DbIncrementProductQuantity.
func (mr *MockProductModelImplMockRecorder) DbIncrementProductQuantity(productId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbIncrementProductQuantity", reflect.TypeOf((*MockProductModelImpl)(nil).DbIncrementProductQuantity), productId)
}
